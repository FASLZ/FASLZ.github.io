<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[sstv音频传图]]></title>
    <url>%2F2019%2F01%2F27%2Fsstv%E9%9F%B3%E9%A2%91%E4%BC%A0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[每隔一段时间，国际空间站就会通过无线电向地面下传sstv图像 SSTVSSTV全称慢扫描电视(Slow Scan Television)，通过将像素转码为脉冲音频信号进行传输图像。 空间站sstv使用频率为145.800 MHz FM，模式为PD120。收到图像以后，可以将其分享在http://www.spaceflightsoftware.com/ARISS_SSTV/ 如何接收安卓手机接收APP 很简单，直接从空间站接收SSTV图像需要将Windows PC或Apple iOS设备上的声卡界面与业余无线电收发信机的音频输出相连接，并将收发信机调谐到145.800 MHz FM。您甚至可以在收发信机的扬声器旁边拿着一个iPhone来接收图片。在Windows中MMSSTV可用于解码信号，在Apple iOS设备上，您可以使用SSTV应用程序进行兼容模式。对于Linux系统，请尝试使用QSSTV。]]></content>
      <categories>
        <category>国际空间站</category>
      </categories>
      <tags>
        <tag>SSTV</tag>
        <tag>音频传输</tag>
        <tag>ISS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Netflix看大片]]></title>
    <url>%2F2019%2F01%2F05%2F%E7%94%A8Netflix%E7%9C%8B%E5%A4%A7%E7%89%87%2F</url>
    <content type="text"><![CDATA[Netflix又称奈飞，是全美乃至全球最大的网络影视提供商，你在这里几乎可以找到所有电影和电视剧。如果你喜欢欧美电影和电视剧，那么你找对地方了。 Netflix原本是美国的一家DVD租赁连锁店。有一天Netflix开窍了，借着互联网的热潮，转身去做了网络租赁，自此一跃成为了知名视频网站。为了避免大量购买版权而需要的资金巨坑，Netflix又另辟蹊径自己创作电影。于是有了《纸牌屋》,有了股票暴涨7倍的神话。 …但遗憾的是,Netflix目前暂未进入中国大陆。这意味着想要躺在床上追剧看电影就得先折腾一翻(此处留坑) 使用Netflix的正确姿势你需要什么？Netflix账号 -注册账号要收费,价格也不便宜。梯子 -由于Netflix查封了大量VPN，所以找一个有效的方法极为重要。 Netflix支持全平台播放，iOS,Android,TV,Xbox One,Chromecast.下载对应软件即可 靠谱的做法✔在淘宝上购买Netflix账号,这也是最方便的。✔百度支持奈飞线路的节点，价格有五到几十不等。这里推荐一个免费的，但只有2个G的流量(｡･∀･)ﾉﾞヾ(･ω･。) 技术层绕过首先确保可以翻墙由于Netflix对ip和cookie有严格的管理，请在同一地区(线路)登录除了使用上面的方法，还可以改变hosts- Windows中将c:\windows\system32\drivers\etc\hosts 文件复制到桌面，添加域名，保存再强行覆盖之前路径。 进入官网，点击注册，输入邮箱地址和密码。下一步，提示选择支付方式你可以选择礼品卡，淘宝也有卖的。还可以选择填写银行卡但你应该没有国外的银行卡吧？so我们来生成一个PayPal，这不妨碍注册和免费使用一个月在这里生成号码然后测试时效性用上面生成的资料注册一个PayPal账号返回Netflix注册页面使用PayPal支付完成✔]]></content>
      <categories>
        <category>影视</category>
      </categories>
      <tags>
        <tag>Netflix</tag>
        <tag>视频网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[------2019------]]></title>
    <url>%2F2019%2F01%2F01%2F2019%2F</url>
    <content type="text"><![CDATA[2018-2019]]></content>
  </entry>
  <entry>
    <title><![CDATA[GridcoinBlocks]]></title>
    <url>%2F2018%2F11%2F15%2FGridcoinBlocks%2F</url>
    <content type="text"><![CDATA[Gridcoin简称GRC，中文音译为格雷德币，是一种和BOINC分布式科学计算相结合的数字货币。它与比特币不同的是后者仅仅为了挖矿而挖矿，消耗了巨大的资源，也没有对现实世界做出什么贡献。(反而使显卡价格飙升)格雷德币的诞生正是为了改变这种不合理的奖励方式，将算力贡献给科学计算。 这些数量可观的计算量甚至可以达到超算水平， 这对于科学发展可以起到一定的推动。毕竟世界上也没有这么多超算。 目前Gridcoin能将一半的算力用于科学计算，开发者的目标是不断改进技术，最终能输出90%的算力用于科学计算。这里引用一下开发者的回答 “如果一个矿工只是进行scrypt加密计算而没有多余的算力输出到科学计算，那么每个区块的收获只有5个格雷德币；如果这个矿工同时将算力贡献给科学计算的话，他可能得到6至150个格雷德币。这种工作量证明的设计方式将激励人们将算力更多地贡献出来。” &emsp;&emsp;&emsp; &emsp;]]></content>
      <tags>
        <tag>Gridcoin</tag>
        <tag>数字货币</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用树莓派探寻地外文明]]></title>
    <url>%2F2018%2F10%2F11%2Fbonic%2F</url>
    <content type="text"><![CDATA[浩瀚的宇宙中是否有生命正同样仰望着星空思考着相同的问题我们孤独吗？从古至今，人们从未停止过探索的脚步拿出你的手机，在BOINC中加入这只庞大的队伍！ 什么是BOINC?BOINC是由加州伯克利开发的分布式计算平台，旨在为各科研单位提供全球计算资源。通过将巨大的计算量拆分给志愿者，由志愿者在本地完成计算后返回给项目服务器。 其设计之初就是用于这个大名鼎鼎的SETI@home项目。现在平台上已经涉及了其他众多领域 StartSETI@home运行原理so背后到底是什么骚操作？ 根据官网的解释，该项目通过分析射电望远镜捕获的无线电信号来搜索那些不可能是自然界产生的信号。 emm…即使存在外星高等生命大概率也不会主动对外发信号但还是值得一试。(事实上建议去更有意义的项目[•_•]) 话说数据从伯克利发到世界各地的电脑上，通过基线滤波（滤掉自然天体发出的宽带频段，聚焦在公认被用于星际通讯的窄带频段）、快速傅里叶变换（将射电望远镜的时域数据转换为频域数据）、啁啾数据（滤掉多普勒效应的影响）、搜索高斯信号（排除地球信号干扰），最终从中寻找可能代表地外文明信号的最佳高斯信号、三连信号，将数据发回伯克利总部，并在屏幕保护界面上显示频率时间能量图。 SETI@home项目五分钟之内接受和分发数据的情况，黄色代表发送到世界各地的数据包，蓝色表示分析之后传回伯克利总部的数据包。目前该项目的数据全部来自位于波多黎各的阿雷西博射电望远镜，后续将加入位于西弗吉尼亚的绿岸GBT射电望远镜和位于荷兰的Lofar射电望远镜。 进入正题 1.在树莓派上安装BOINC客户端仅需要一行命令即可在树莓派上安装BOINC1sudo apt-get install boinc-client boinc 在跳出的对话框中输入y和回车，确认下载(需要64MB)。 安装成功之后，在菜单项“系统工具”中找到下载完成的“BOINC Manager”。 2.选择你想参加的分布式计算项目选择SETI@home，点击“下一步“ 当然，你还可以添加其他项目。 3.注册新账号或登陆已有账号 4.自动从项目服务器上获取数据，开始计算 现在，你的树莓派就开始自动计算并把数据发回项目服务器了，大功告成。 树莓派性能远不及平常电脑，计算一个数据包需要19个小时(ಥ﹏ಥ) ，而普通笔记本电脑计算一个数据包仅需3个小时。而且树莓派上运行SETI@home不能看到本项目标志性的高大上信号处理屏幕保护图片，所以你可以用普通电脑参与SETI@home项目。通过设置修改计算参数，防止CPU资源被全部占用，或CPU过烫 其他运行设备BOINC还可以运行在安卓手机上点击下载BOINC 项目 - SETI@home SETI@home是1999年加州大学伯克利分校发起的分布式计算项目，旨在发动全球计算机的闲置算力，分析阿雷西博射电望远镜搜集的宇宙射线数据，从不同频段识别可能的文明信号，搜寻地外文明。 - World Community Grid 中文译名为“世界共同体网格计划”或“世界公共网格”。是由 IBM 公司主持的一项基于互联网的公益性分布式计算项目，开始于2004年11月16日。该项目将联合分布于世界各地的志愿者们提供的计算资源，用于一些能为全人类带来福音的大型科学研究项目。 World Community Grid 创立之初是基于 Grid.org 的平台搭建的，之后于 2007 年开始全面迁移至 BOINC 平台。World Community Grid 在底层计算平台的基础上，为具体的计算项目提供了一个更高层次的计算平台。 随着研究课题的增加，World Community Grid 逐渐发展成为一个医药、生物和环境等各种方面研究类的分布式计算平台。 其他 数字货币GridcoinBoinc 还可以干什么？ 事实上，你可以屯点数字货币当然，这不是比特币也不是以太坊，而是为科学计算而生的格雷德币 &gt;详情]]></content>
      <categories>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>Gridcoin</tag>
        <tag>树莓派</tag>
        <tag>BOINC</tag>
        <tag>分布式计算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[飞行模拟器]]></title>
    <url>%2F2018%2F09%2F30%2F%E9%A3%9E%E8%A1%8C%E6%A8%A1%E6%8B%9F%E5%99%A8%2F</url>
    <content type="text"><![CDATA[X-Plane 无意中翻到这个软件时激动的泪流满面(ಥ﹏ಥ) 若干年前，对着谷歌地图里的模拟器我还能玩一下午 不知为什么突然就从谷歌play消失了，翻了半天，另一个业内领袖’极限着陆’也不见了Σ(°Д°;)不过在国内的应用平台上还是可以下载的，AppStore里也还在🤔是我打开的方式不对么?_? 支持的机型1. CESSNA 172SP2. CIRRUSJET SF503. PIPER SUPER CUB4. DOUGLAS DC-35. BARON B586. PIAGGIO AVANTI7. KING AIR C908. BOMBARDIER CRJ2009. AIRBUS A32010. BOEING 777-200ER11. BOEING 737-80012. MCDONNELL DOUGLAS MD-8013. BOEING 747-40014. SIKORSKY S-7615. A-10 THUNDERBOLT II16. F-22 RAPTOR17. F-4 PHANTOM II 放几张夜景 波音747冷舱启动及自动着陆 Xplane for Android 想要更好的体验，请转战pc版。不过完整版要花钱，网上找找哪里有破解版的吧。]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>App</tag>
        <tag>X-Plane</tag>
        <tag>fly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tool]]></title>
    <url>%2F2018%2F09%2F21%2Ftool%2F</url>
    <content type="text"><![CDATA[App for Android &gt;Coding C4droid -C/C++ IDE Pydroid3 -Python3 IDE AIDE -Java/Android_app/Html IDE Java N-IDE -Java IDE anWriter free -Html/css/JavaScrip IDE Learn code SoloLearn -the best community AIDE -you can learn android app programming for LinuxTerminal w3m -an web browser (with image) elinks -web browser weechat -IRC irssi -IRC Xchat -IRC 未完待续]]></content>
      <tags>
        <tag>tool</tag>
        <tag>App</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12306车票查询]]></title>
    <url>%2F2018%2F09%2F19%2F12306%2F</url>
    <content type="text"><![CDATA[从C脱坑开始接触Python，这门传说中的语言逐渐展示出了它的强大( ॑꒳ ॑)最近在网上发现有使用python进行12306查票的教程，正好拿来练练手，于是乎写下此文 2018-09-30重写了查询方式 2018-09-21由于12306反爬措施频繁更新，无法查询今后将不定期更新 流程 获得提交网址 提交信息 解析并打印获得信息 需要的模块 requests 用于获取网页数据 docopt 解析命令行参数 prettytable 数据用表格的形式打印在终端 colorama 为打印在表格中的数据着色 pprint 格式化输出安装方式：pip install requests prettytable docopt colorama pprint 第一步-获取提交入口当我们打开网站时，发现只能从页面中的表单进行输入，(另一种方法这里不做讨论)那么，怎么将数据直接提交给12306的服务器呢？没错，通过修改网址中的数据来提交，但当然在浏览器中是看不到网址的。打开谷歌浏览器，在12306查票页面中敲入F12调出开发者工具，找到“Network”按F5刷新(在页面中随便填入查询信息不然无法截获http请求)，不出意外就会有资源的请求url、HTTP方法、响应状态码、请求头和响应头及它们各自的值、请求参数等等。在列表里找到网址: https://kyfw.12306.cn/otn/leftTicket/query?leftTicketDTO.train_date={}&amp;leftTicketDTO.from_station={}&amp;leftTicketDTO.to_station={}&amp;purpose_codes=ADULT {}中需要填入相应数据比如 {2018-09-19}{SHH}{XAY} 日期只能填写当日及之后30天 那几个字母就是站点的代号，所谓的电报码显然，12306不愿让我们知道对应的代号，但在通过chrome中强大的f12，同样可以找到对应代号的链接https://kyfw.12306.cn/otn/resources/js/framework/station_name.js?station_version=1.8971 不难发现在station_names字符串中有站点对应的中文，因此可以通过程序来获得代号并填入之前的链接 get_stations_code.py123456789101112131415161718192021import reimport requestsfrom pprint import pprint'''pprint -格式化输出用于将获得的车站代号并存入station.py文件'''url = 'https://kyfw.12306.cn/otn/resources/js/framework/station_name.js?station_version=1.9081'#发送get请求，不判断证书response = requests.get(url, verify=False)#使用正则表达式提取所有站点 汉字和大写代号#stations = dict(re.findall(u'([\u4e00-\u9fa5]+)\|([A-Z]+)', response.text))#使用正则表达式提取所有站点 大写代号和拼音 ([\u0041-\u005a]+)stationsP = dict(re.findall(u'([A-Z]+)\|([a-z]+)', response.text))stations = dict( (v,k) for k,v in stationsP.items() )#格式化输出pprint(stations,indent=4) 运行程序，输出了站点拼音对应的代号但如果要获取其中的代号还需要将对应信息放在文件中读取因此在命令行重定向输出:bash $python get_stations_code.py &gt; stations.py这里导入成python文件是为了之后的查询工作，可以直接import进来。 第二步-输入处理完整程序tickets.py1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192import requestsimport jsonimport timeimport refrom prettytable import PrettyTablefrom colorama import Fore,inittitle = '车次 出发/到达站 历时 软卧 硬卧 硬座 状态'nowTime = time.strftime('%Y-%m-%d')url1 = 'https://kyfw.12306.cn/otn/resources/js/framework/station_name.js?station_version=1.8971'response = requests.get(url1)stations = re.findall(u'([\u4e00-\u9fa5]+)\|([A-Z]+)',response.text)stationsPY = re.findall(u'([A-Z]+)\|([a-z]+)',response.text)stations = dict(stations)stationsPY = dict(&#123;v:k for k,v in stationsPY&#125;)#print(stations)def name(code): for k,v in stations.items(): if code == v: return kFs = input('From station:\t')Ts = input('End station:\t')F = stations.get(Fs) or stationsPY.get(Fs) or 'SHH'T = stations.get(Ts) or stationsPY.get(Ts) or 'XAY'date = input('time of train:\t') or nowTimeif len(date) == 8: date = '&#123;&#125;-&#123;&#125;-&#123;&#125;'.format(date[:4],date[4:6],date[6:])elif len(date) == 4: date = '&#123;&#125;-&#123;&#125;-&#123;&#125;'.format(time.strftime('%Y'),date[:2],date[2:])elif len(date) == 2: date = '&#123;&#125;-&#123;&#125;'.format(time.strftime('%Y-%m'),date)elif len(date) == 1: date = '&#123;&#125;-&#123;&#125;'.format(time.strftime('%Y-%m'),'0'+date)print(date,F,T)#url='https://kyfw.12306.cn/otn/leftTicket/query?leftTicketurl = 'https://kyfw.12306.cn/otn/leftTicket/queryA'header = &#123;'User-Agent': header = &#123;'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:23.0) Gecko/20100101 Firefox/23.0'&#125;key_word = &#123; "leftTicketDTO.train_date": date, "leftTicketDTO.from_station": F, "leftTicketDTO.to_station": T, "purpose_codes": "ADULT" &#125;try: response = requests.session().get(url, params=key_word, headers=header) tickets = response.json() lists = tickets['data']['result']except Exception as error: print('404 ?_? this url is losted') exit(0)table=PrettyTable(title.split(' '))#tickets=[]for list in lists: #print(list+'\n\n') ticket = [] lis = list.split('|') train_code = lis[3] from_station_name=lis[6] to_station_name = lis[7] start_time= lis[8] arrive_time =lis[9] lishi = lis[10] swz_num = lis[32] or lis[25] zy_num = lis[31] ze_num = lis[30] gr_num =lis[21] rw_num = lis[23] dw_num = lis[27] yw_num = lis[28] rz_num = lis[24] yz_num = lis[29] wz_num = lis[26] qt_num = lis[22] note_num = lis[1] #ticket.append() if lis[11] == 'Y': lis11 = '有' elif lis[11] == 'N': lis11 = '无' elif lis[11] == 'IS_TIME_NOT_BUY': lis11 = 'X' fs = (Fore.GREEN + name(lis[6]) + Fore.RESET) ts = (Fore.RED + name(lis[7]) + Fore.RESET) tfs= Fore.GREEN + lis[8] + Fore.RESET tts= Fore.RED + lis[9] + Fore.RESET table.add_row([lis[3],fs+'\n'+ts,tfs+'\n'+tts,lis[23],lis[28],lis[29],lis[1]])print(table) 未完待续]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>code</tag>
        <tag>12306</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F09%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[开启新的旅程]]></content>
  </entry>
</search>
