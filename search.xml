<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用树莓派探寻地外文明]]></title>
    <url>%2F2018%2F10%2F11%2Fbonic%2F</url>
    <content type="text"><![CDATA[浩瀚的宇宙中是否有生命正同样仰望着星空思考着相同的问题我们孤独吗？从古至今，人们从未停止过探索的脚步拿出你的手机，在BOINC中加入我们！ 什么是BOINC?BOINC是由加州伯克利开发的分布式计算平台，旨在为各科研单位提供全球计算资源。通过将庞大的计算量拆分给志愿者，由志愿者在本地完成计算后返回给项目服务器。 其设计之初就是用于这个大名鼎鼎的SETI@home。现在平台上已经有了其他领域，包括数学、医学、天文学、气象学。 所以我们要在这个平台上进行运算。 StartSETI@home运行原理你可能要问了，扯了这么多到底是怎样寻找外星生命的呢？ 根据官网的解释，通过分析射电望远镜捕获的无线电信号来搜索那些不可能是自然界产生的信号。 emm…虽然外星生物大概率不会主动对外发信号or上帝视角or不是碳基生命or根本不存在，但还是值得一试。 数据从伯克利发到世界各地的电脑上，通过基线滤波（滤掉自然天体发出的宽带频段，聚焦在公认被用于星际通讯的窄带频段）、快速傅里叶变换（将射电望远镜的时域数据转换为频域数据）、啁啾数据（滤掉多普勒效应的影响）、搜索高斯信号（排除地球信号干扰），最终从中寻找可能代表地外文明信号的最佳高斯信号、三连信号，将数据发回伯克利总部，并在屏幕保护界面上显示频率时间能量图。 SETI@home项目五分钟之内接受和分发数据的情况，黄色代表发送到世界各地的数据包，蓝色表示分析之后传回伯克利总部的数据包。目前该项目的数据全部来自位于波多黎各的阿雷西博射电望远镜，后续将加入位于西弗吉尼亚的绿岸GBT射电望远镜和位于荷兰的Lofar射电望远镜。 进入正题 1.在树莓派上安装BOINC客户端仅需要一行命令即可在树莓派上安装BOINC1sudo apt-get install boinc-client boinc 在跳出的对话框中输入y和回车↩，确认下载(需要64MB存储空间)。 安装成功之后，在菜单项“系统工具”中点击下载完成的“BOINC Manager”。 2.选择你想参加的分布式计算项目选择SETI@home，点击“下一步“ 当然，你还可以添加其他项目。 3.注册新账号或登陆已有账号 4.自动从项目服务器上获取数据，开始计算 现在，你的树莓派就开始自动计算并把数据发回项目服务器了，大功告成。 树莓派性能远不及平常电脑，计算一个数据包需要19个小时(ಥ﹏ಥ) ，而普通笔记本电脑计算一个数据包仅需3个小时。而且树莓派上运行SETI@home不能看到本项目标志性的高大上信号处理屏幕保护图片，所以你可以用普通电脑参与SETI@home项目。通过设置修改计算参数，防止CPU资源被全部占用，或CPU过烫 项目 - SETI@home SETI@home是1999年加州大学伯克利分校发起的分布式计算项目，旨在发动全球计算机的闲置算力，分析阿雷西博射电望远镜搜集的宇宙射线数据，从不同频段识别可能的文明信号，搜寻地外文明。 - World Community Grid 中文译名为“世界共同体网格计划”或“世界公共网格”。是由 IBM 公司主持的一项基于互联网的公益性分布式计算项目，开始于2004年11月16日。该项目将联合分布于世界各地的志愿者们提供的计算资源，用于一些能为全人类带来福音的大型科学研究项目。 World Community Grid 创立之初是基于 Grid.org 的平台搭建的，之后于 2007 年开始全面迁移至 BOINC 平台。World Community Grid 在底层计算平台的基础上，为具体的计算项目提供了一个更高层次的计算平台。 随着研究课题的增加，World Community Grid 逐渐发展成为一个医药、生物和环境等各种方面研究类的分布式计算平台。目前正在该平台上运行的子项目包括: Microbiome Immunity Project （微生物免疫项目）Smash Childhood Cancer （粉碎儿童癌症）OpenZika （对抗寨卡病毒）Help Stop TB （帮助阻止肺结核）Outsmart Ebola Together （共同抗击埃博拉病毒）FightAIDS@Home - Phase 2（对抗艾滋 第二阶段）FightAIDS@home（对抗艾滋）Mapping Cancer Markers (测绘癌症标记物项目) 曾经在该平台上运行的子项目包括有： Uncovering Genome Mysteries （揭开微生物基因组之谜）The Clean Energy Project - Phase 2（清洁能源项目 第二阶段）Discovering Dengue Drugs - Together（发现治疗疗登革热的药物 ，第二阶段）Help Cure Muscular Dystrophy（治疗肌肉萎缩症，第二阶段）Help Fight Childhood Cancer（对抗儿童癌症）Help Conquer Cancer（征服癌症）Human Proteome Folding（人类蛋白质组折叠，第二阶段）GO Fight Against Malariar(抗击疟疾）Drug Search for Leishmaniasis（搜寻利什曼病的药物）Computing for Clean Water（清水计算，清华大学主持项目）Influenza Antiviral Drug Search（寻找对付流感病毒的药物）The Clean Energy Project（清洁能源项目）Nutritious Rice for the World （全球营养水稻）AfricanClimate@Home（开发非洲气候模型）Genome Comparison(基因组比较)Help Defeat Cancer（对抗癌症） -]]></content>
      <categories>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>BOINC</tag>
        <tag>分布式计算</tag>
        <tag>Gridcoin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[飞行模拟器]]></title>
    <url>%2F2018%2F09%2F30%2F%E9%A3%9E%E8%A1%8C%E6%A8%A1%E6%8B%9F%E5%99%A8%2F</url>
    <content type="text"><![CDATA[X-Plane 无意中翻到这个软件时激动的泪流满面(ಥ﹏ಥ) 若干年前，对着谷歌地图里的模拟器我还能玩一下午 不知为什么突然就从谷歌play消失了，翻了半天，另一个业内领袖’极限着陆’也不见了Σ(°Д°;)不过在国内的应用平台上还是可以下载的，AppStore里也还在🤔是我打开的方式不对么?_? 支持的机型1. CESSNA 172SP2. CIRRUSJET SF503. PIPER SUPER CUB4. DOUGLAS DC-35. BARON B586. PIAGGIO AVANTI7. KING AIR C908. BOMBARDIER CRJ2009. AIRBUS A32010. BOEING 777-200ER11. BOEING 737-80012. MCDONNELL DOUGLAS MD-8013. BOEING 747-40014. SIKORSKY S-7615. A-10 THUNDERBOLT II16. F-22 RAPTOR17. F-4 PHANTOM II 放几张夜景 波音747冷舱启动及自动着陆 Xplane for Android 想要更好的体验，请转战pc版。不过完整版要花钱，网上找找哪里有破解版的吧。]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>App</tag>
        <tag>X-Plane</tag>
        <tag>fly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tool]]></title>
    <url>%2F2018%2F09%2F21%2Ftool%2F</url>
    <content type="text"><![CDATA[App for Android &gt;Coding C4droid -C/C++ IDE Pydroid3 -Python3 IDE AIDE -Java/Android_app/Html IDE Java N-IDE -Java IDE anWriter free -Html/css/JavaScrip IDE Learn code SoloLearn -the best community AIDE -you can learn android app programming for LinuxTerminal w3m -an web browser (with image) elinks -web browser weechat -IRC irssi -IRC Xchat -IRC 未完待续]]></content>
      <tags>
        <tag>tool</tag>
        <tag>App</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12306车票查询]]></title>
    <url>%2F2018%2F09%2F19%2F12306%2F</url>
    <content type="text"><![CDATA[从C脱坑开始接触Python，这门传说中的语言逐渐展示出了它的强大( ॑꒳ ॑)最近在网上发现有使用python进行12306查票的教程，正好拿来练练手，于是乎写下此文 2018-09-30重写了查询方式 2018-09-21由于12306反爬措施频繁更新，无法查询今后将不定期更新 流程 获得提交网址 提交信息 解析并打印获得信息 需要的模块 requests 用于获取网页数据 docopt 解析命令行参数 prettytable 数据用表格的形式打印在终端 colorama 为打印在表格中的数据着色 pprint 格式化输出安装方式：pip install requests prettytable docopt colorama pprint 第一步-获取提交入口当我们打开网站时，发现只能从页面中的表单进行输入，(另一种方法这里不做讨论)那么，怎么将数据直接提交给12306的服务器呢？没错，通过修改网址中的数据来提交，但当然在浏览器中是看不到网址的。打开谷歌浏览器，在12306查票页面中敲入F12调出开发者工具，找到“Network”按F5刷新(在页面中随便填入查询信息不然无法截获http请求)，不出意外就会有资源的请求url、HTTP方法、响应状态码、请求头和响应头及它们各自的值、请求参数等等。在列表里找到网址: https://kyfw.12306.cn/otn/leftTicket/query?leftTicketDTO.train_date={}&amp;leftTicketDTO.from_station={}&amp;leftTicketDTO.to_station={}&amp;purpose_codes=ADULT {}中需要填入相应数据比如 {2018-09-19}{SHH}{XAY} 日期只能填写当日及之后30天 那几个字母就是站点的代号，所谓的电报码显然，12306不愿让我们知道对应的代号，但在通过chrome中强大的f12，同样可以找到对应代号的链接https://kyfw.12306.cn/otn/resources/js/framework/station_name.js?station_version=1.8971 不难发现在station_names字符串中有站点对应的中文，因此可以通过程序来获得代号并填入之前的链接 get_stations_code.py123456789101112131415161718192021import reimport requestsfrom pprint import pprint'''pprint -格式化输出用于将获得的车站代号并存入station.py文件'''url = 'https://kyfw.12306.cn/otn/resources/js/framework/station_name.js?station_version=1.9081'#发送get请求，不判断证书response = requests.get(url, verify=False)#使用正则表达式提取所有站点 汉字和大写代号#stations = dict(re.findall(u'([\u4e00-\u9fa5]+)\|([A-Z]+)', response.text))#使用正则表达式提取所有站点 大写代号和拼音 ([\u0041-\u005a]+)stationsP = dict(re.findall(u'([A-Z]+)\|([a-z]+)', response.text))stations = dict( (v,k) for k,v in stationsP.items() )#格式化输出pprint(stations,indent=4) 运行程序，输出了站点拼音对应的代号但如果要获取其中的代号还需要将对应信息放在文件中读取因此在命令行重定向输出:bash $python get_stations_code.py &gt; stations.py这里导入成python文件是为了之后的查询工作，可以直接import进来。 第二步-输入处理完整程序tickets.py1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192import requestsimport jsonimport timeimport refrom prettytable import PrettyTablefrom colorama import Fore,inittitle = '车次 出发/到达站 历时 软卧 硬卧 硬座 状态'nowTime = time.strftime('%Y-%m-%d')url1 = 'https://kyfw.12306.cn/otn/resources/js/framework/station_name.js?station_version=1.8971'response = requests.get(url1)stations = re.findall(u'([\u4e00-\u9fa5]+)\|([A-Z]+)',response.text)stationsPY = re.findall(u'([A-Z]+)\|([a-z]+)',response.text)stations = dict(stations)stationsPY = dict(&#123;v:k for k,v in stationsPY&#125;)#print(stations)def name(code): for k,v in stations.items(): if code == v: return kFs = input('From station:\t')Ts = input('End station:\t')F = stations.get(Fs) or stationsPY.get(Fs) or 'SHH'T = stations.get(Ts) or stationsPY.get(Ts) or 'XAY'date = input('time of train:\t') or nowTimeif len(date) == 8: date = '&#123;&#125;-&#123;&#125;-&#123;&#125;'.format(date[:4],date[4:6],date[6:])elif len(date) == 4: date = '&#123;&#125;-&#123;&#125;-&#123;&#125;'.format(time.strftime('%Y'),date[:2],date[2:])elif len(date) == 2: date = '&#123;&#125;-&#123;&#125;'.format(time.strftime('%Y-%m'),date)elif len(date) == 1: date = '&#123;&#125;-&#123;&#125;'.format(time.strftime('%Y-%m'),'0'+date)print(date,F,T)#url='https://kyfw.12306.cn/otn/leftTicket/query?leftTicketurl = 'https://kyfw.12306.cn/otn/leftTicket/queryA'header = &#123;'User-Agent': header = &#123;'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:23.0) Gecko/20100101 Firefox/23.0'&#125;key_word = &#123; "leftTicketDTO.train_date": date, "leftTicketDTO.from_station": F, "leftTicketDTO.to_station": T, "purpose_codes": "ADULT" &#125;try: response = requests.session().get(url, params=key_word, headers=header) tickets = response.json() lists = tickets['data']['result']except Exception as error: print('404 ?_? this url is losted') exit(0)table=PrettyTable(title.split(' '))#tickets=[]for list in lists: #print(list+'\n\n') ticket = [] lis = list.split('|') train_code = lis[3] from_station_name=lis[6] to_station_name = lis[7] start_time= lis[8] arrive_time =lis[9] lishi = lis[10] swz_num = lis[32] or lis[25] zy_num = lis[31] ze_num = lis[30] gr_num =lis[21] rw_num = lis[23] dw_num = lis[27] yw_num = lis[28] rz_num = lis[24] yz_num = lis[29] wz_num = lis[26] qt_num = lis[22] note_num = lis[1] #ticket.append() if lis[11] == 'Y': lis11 = '有' elif lis[11] == 'N': lis11 = '无' elif lis[11] == 'IS_TIME_NOT_BUY': lis11 = 'X' fs = (Fore.GREEN + name(lis[6]) + Fore.RESET) ts = (Fore.RED + name(lis[7]) + Fore.RESET) tfs= Fore.GREEN + lis[8] + Fore.RESET tts= Fore.RED + lis[9] + Fore.RESET table.add_row([lis[3],fs+'\n'+ts,tfs+'\n'+tts,lis[23],lis[28],lis[29],lis[1]])print(table) 未完待续]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>code</tag>
        <tag>12306</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F09%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[开启新的旅程]]></content>
  </entry>
</search>
